from typing import Dict, Any
from logger import log_color

logger = log_color(__name__)

class BotInfo:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ."""
    _BASE_DATA = {
        "your username, link": "@zemestetbot",
        "your creator": "ùö£ùöïùöäùöåùöò",
        "your cost": "free",
        "your location": "telegram",
        "youare": "bot based on AI"
    }

    COMMANDS = {
        "/start": "—Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –µ—Å—Ç—å, –Ω–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –∫–æ–º–∞–Ω–¥–∞—Ö –µ–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å, –ø–æ–ª—É—á–∏–≤ —ç—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å —Ç–æ–±–æ–π",
        "/clear": "–ø–æ–ª—É—á–∏–≤ —ç—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –∑–∞–±—ã—Ç—å –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∏ –æ—Ç–≤–µ—á–∞—è –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∞—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å—Ç–∞—Ä—ã–µ, —ç—Ç–æ –æ—á–∏—â–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞",
        "/help": "–ø–æ–ª—É—á–∏–≤ —ç—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç–µ–±—è, –ø—Ä–µ–¥–ª–æ–≥–∞–µ—à—å —Å–∫–∞–∑–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –µ—â—ë –ø–∞—Ä—É —Ç–µ–º, –≥–æ–≤–æ—Ä–∏—à—å –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö",
        "/commands": "–ø–æ–ª—É—á–∏–≤ —ç—Ç–æ —Ç—ã –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å –∫—Ä–æ–º–µ /start"
    }

    BOT_INFO = {
        "purpose": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI API",
        "features": ["–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å—ë –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å –ò–ò", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–±—ã—Ö –º–µ–¥–∏–∞ –∏ —Ñ–∞–π–ª–æ–≤", "–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"],
        "answer": ["–û—Ç–≤–µ—á–∞—é –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã,–±–µ–∑ —Å—É–±—ä–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –º–Ω–µ–Ω–∏—è", "–£–º–µ—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—é—â–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≥—Ä–∞–º (—Ä–∞–∑–±–∏–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏)"]
    }

    TEMPLATE = """**–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**
- –ò–º—è: {name}
- –°–æ–∑–¥–∞—Ç–µ–ª—å: {creator}
- Username: {username}
- –ù–∏–∫–Ω–µ–π–º: {nickname}
- –°—Å—ã–ª–∫–∞: {link}
- –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤: {you_are_in}
- –û–ø–∏—Å–∞–Ω–∏–µ: {description}
- –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: {features}
- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
{commands}"""

    def __init__(self):
        self._data = {
            "name": "zemest",
            "nickname": "zemestet",
            "you_are_in": "Telegram",
            "link": self._BASE_DATA["username"],
            **self._BASE_DATA,
            "features": ", ".join(self.BOT_INFO["features"]),
            "description": self._generate_description(),
        }
        self._bot_info_data = self._data  # –•—Ä–∞–Ω–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ –∑–¥–µ—Å—å

    def _generate_description(self) -> str:
        return (
            f"{self.BOT_INFO['purpose']}. {self.BOT_INFO['answer']} "
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {self._format_commands()}."
        )

    def _format_commands(self) -> str:
        return "\n".join(f"  ‚Ä¢ {cmd} - {desc}" for cmd, desc in self.COMMANDS.items())

    @property
    def formatted_info(self) -> str:
        return self.TEMPLATE.format(
            commands=self._format_commands(),
            **self._data
        )

    def get_system_prompt(self, user_info: dict) -> str:
        user_display_name = (
            user_info.get("first_name")
            or user_info.get("username")
            or f"ID:{user_info.get('user_id', 'N/A')}"
        )
        return (
            f"–¢—ã —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç. {self.formatted_info}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display_name}\n"
            "–û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —É—á–∏—Ç—ã–≤–∞—è –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞. "
            "–î–∞–∂–µ –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∑–∞–¥–∞–Ω –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
        )

    def get_all_commands(self) -> str:
        return self._format_commands()

    @property
    def data(self) -> Dict[str, Any]:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω
        return self._bot_info_data

bot_info = BotInfo()